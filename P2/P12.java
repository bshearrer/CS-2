//Project Euler Problem 12
//By: Brandon Shearrer
//CS 2 Spring 2018


/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

public class P12 
{

    final static int THRESHOLD = 500;

    public static void main(String[] args) 
    {
        System.out.println(getTriangle());
    }

    public static long getTriangle() 
    {
        int n = 1;
        long currentSum = 0;
        while (!hasOverXDivisors(currentSum, THRESHOLD)) 
        {
            currentSum += n;
            n++;
        }
        return currentSum;
    }

    private static boolean hasOverXDivisors(long nr, int threshold) 
    {
        if ( nr <= threshold ) 
        {
            return false;
        }
        int divisors = 0;
        int i;
        int sqrt = (int) Math.sqrt(nr);
        for ( i = 1 ; i <= sqrt ; i++ ) 
        {
            if ( nr % i == 0 ) 
            {
                divisors+=2;           
            }
        }
        if ( sqrt*sqrt == nr )
        {      
            divisors--;
        }
        if ( divisors > threshold ) 
        {
            return true;
        }
        return false;
    }
}