//Project Euler Problem 12
//By: Brandon Shearrer
//CS 2 Spring 2018

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

public class P12
{
	public static void main(String[] args) 
	{
		System.out.println(P12.calculate());
	}
	
	public static String calculate() 
	{
		int triangle = 0;
		for (int i = 1; ; i++) 
		{
			if (Integer.MAX_VALUE - triangle < i)
			{
				throw new ArithmeticException("Overflow");
			}
			triangle += i; 
			if (countDivisors(triangle) > 500)
			{
				return Integer.toString(triangle);
			}
		}
	}
	// Returns floor(sqrt(x)), for x >= 0.
	public static int sqrt(int x) {
		if (x < 0)
		{
			throw new IllegalArgumentException("Square root of negative number");
		}
		int y = 0;
		for (int i = 1 << 15; i != 0; i >>>= 1) {
			y |= i;
			if (y > 46340 || y * y > x)
				y ^= i;
		}
		return y;
	}

	private static int countDivisors(int n) 
	{
		int count = 0;
		int end = sqrt(n);
		for (int i = 1; i < end; i++) 
		{
			if (n % i == 0)
			{
				count += 2;
			}
		}
		if (end * end == n) 
		{
			count++;
		}
		return count;
	}
}